---
# file: playbooks/750-setup-network-cloudflare-tunnel.yml
# Creates a Cloudflare tunnel, sets up DNS, prepares configuration for Kubernetes, and tests the tunnel
# Usage:
# ansible-playbook 750-setup-network-cloudflare-tunnel.yml -e tunnel_name="nerdmeet-test" -e domain="nerdmeet.org" -e '{"subdomains": ["www-test", "api-test"]}'
# Or for wildcard subdomain:
# ansible-playbook 750-setup-network-cloudflare-tunnel.yml -e tunnel_name="nerdmeet-test" -e domain="nerdmeet.org"
# TODO: the path /mnt/urbalurbadisk/cloudflare/ has moved to /mnt/urbalurbadisk/topsecret/cloudflare/
- name: Creating, Configuring, and Testing Cloudflare Tunnel
  hosts: localhost
  vars:
    tunnel_name: "{{ tunnel_name }}"
    domain: "{{ domain }}"
    fileprefix: "cloudflare-"
    suffix: "-tunnel"
    cloudflarefolder: "/mnt/urbalurbadisk/cloudflare/"
    full_tunnel_name: "{{ fileprefix }}{{ tunnel_name }}{{ suffix }}"
    cloudflare_certificate_file: "{{ cloudflarefolder }}cloudflare-certificate.pem"
    cloudflare_credentials_file: "{{ cloudflarefolder }}{{ full_tunnel_name }}.json"
    cloudflare_config_file: "{{ cloudflarefolder }}{{ full_tunnel_name }}-config.yml"

  tasks:
    - name: 1. Check if required variables are provided
      ansible.builtin.fail:
        msg: "tunnel_name and domain must be provided. tunnel_name should contain no spaces or special characters"
      when: tunnel_name is not defined or
            domain is not defined or
            not tunnel_name | regex_search('^[a-zA-Z0-9_-]+$') or
            not domain | regex_search('^[a-zA-Z0-9_.-]+$')

    - name: 2. Set subdomains variable
      ansible.builtin.set_fact:
        subdomains: "{{ subdomains | default([]) }}"

    - name: 3. Generate full hostnames
      ansible.builtin.set_fact:
        hostnames: "{{ ['*.' + domain] if subdomains | length == 0 else (subdomains | map('regex_replace', '^(.+)$', '\\1.' + domain) | list) | unique }}"

    - name: 4. Display hostnames to be set up
      ansible.builtin.debug:
        var: hostnames

    - name: 5. Ensure the cloudflare directory exists
      ansible.builtin.file:
        path: "{{ cloudflarefolder }}"
        state: directory
        mode: '0755'

    - name: 6. Remove existing Cloudflare certificate if present in .cloudflared directory
      ansible.builtin.file:
        path: /home/ansible/.cloudflared/cert.pem
        state: absent

    - name: 7. Check if Cloudflare certificate exists in the specified location
      ansible.builtin.stat:
        path: "{{ cloudflare_certificate_file }}"
      register: cert_file

    - name: 8. Delete previous config files for {{ full_tunnel_name }}
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ cloudflare_credentials_file }}"
        - "{{ cloudflare_config_file }}"

    - name: 9. Login to Cloudflare and get certificate if not present in the specified location
      when: not cert_file.stat.exists
      block:
        - name: 9.1 Run cloudflared login command
          ansible.builtin.shell: set -o pipefail && cloudflared login 2>&1 | tee /dev/tty
          args:
            executable: /bin/bash
          register: cloudflared_login
          changed_when: true

        - name: 9.2 Check if certificate was created after login
          ansible.builtin.stat:
            path: /home/ansible/.cloudflared/cert.pem
          register: new_cert_file

        - name: 9.3 Fail if certificate is not found after login
          ansible.builtin.fail:
            msg: "Login failed. Certificate not found. Please ensure you completed the login process in your browser."
          when: not new_cert_file.stat.exists

        - name: 9.4 Move the Cloudflare certificate to cloudflare folder
          ansible.builtin.command: mv /home/ansible/.cloudflared/cert.pem {{ cloudflare_certificate_file }}
          args:
            removes: /home/ansible/.cloudflared/cert.pem
            creates: "{{ cloudflare_certificate_file }}"

    - name: 10. Check if tunnel already exists
      ansible.builtin.command: "cloudflared tunnel --origincert {{ cloudflare_certificate_file }} list -o json"
      register: existing_tunnel
      changed_when: false

    - name: 11. Set fact for tunnel existence
      ansible.builtin.set_fact:
        tunnel_exists: "{{ (existing_tunnel.stdout | from_json | selectattr('name', 'equalto', full_tunnel_name) | list | length > 0) }}"

    - name: 12. Delete existing tunnel if it exists
      ansible.builtin.command: "cloudflared tunnel --origincert {{ cloudflare_certificate_file }} delete -f {{ full_tunnel_name }}"
      when: tunnel_exists
      changed_when: true

    - name: 13. Create Cloudflare Tunnel
      ansible.builtin.command: "cloudflared tunnel --origincert {{ cloudflare_certificate_file }} create -o json {{ full_tunnel_name }}"
      register: tunnel_output
      changed_when: true

    - name: 14. Set tunnel info and ID
      ansible.builtin.set_fact:
        tunnel_info: "{{ tunnel_output.stdout | from_json }}"
        tunnel_id: "{{ tunnel_output.stdout | from_json | json_query('id') }}"

    - name: 15. Rename the tunnel credentials file
      ansible.builtin.command: mv {{ cloudflarefolder }}{{ tunnel_id }}.json {{ cloudflare_credentials_file }}
      args:
        removes: "{{ cloudflarefolder }}{{ tunnel_id }}.json"
        creates: "{{ cloudflare_credentials_file }}"

    - name: 16. Set up DNS routing for each hostname
      ansible.builtin.command: "cloudflared tunnel --origincert {{ cloudflare_certificate_file }} route dns --overwrite-dns {{ full_tunnel_name }} {{ item }}"
      loop: "{{ hostnames }}"
      register: dns_routing_results
      changed_when: true

    - name: 17. Create tunnel config file
      ansible.builtin.copy:
        dest: "{{ cloudflare_config_file }}"
        content: |
          tunnel: {{ tunnel_id }}
          credentials-file: {{ cloudflare_credentials_file }}
          ingress:
          {% for hostname in hostnames %}
            - hostname: {{ hostname }}
              service: http://localhost:8080
          {% endfor %}
            - service: http_status:404
        mode: '0644'

    - name: 18. Validate the tunnel config file
      ansible.builtin.command: cloudflared tunnel -config {{ cloudflare_config_file }} ingress validate
      register: config_validation
      changed_when: false

    - name: 19. Fail if config validation fails
      ansible.builtin.fail:
        msg: "Tunnel configuration validation failed. Please check the config file and try again."
      when: config_validation.rc != 0

    - name: 20. Check if port 8080 is free for the local HTTP server
      ansible.builtin.command: lsof -i :8080
      register: find_process
      changed_when: false
      failed_when: find_process.rc not in [0, 1]

    - name: 21. Kill process using port 8080 if any
      ansible.builtin.command: kill -9 {{ find_process.stdout_lines[1].split()[1] }}
      when: find_process.stdout_lines | length > 1
      register: kill_result
      failed_when: false
      changed_when: kill_result.rc == 0

    - name: 22. Start the simple HTTP server locally
      ansible.builtin.shell: nohup python3 -m http.server 8080 --directory /mnt/urbalurbadisk/tst/nginx > /tmp/http_server.log 2>&1 &
      args:
        executable: /bin/bash
      changed_when: true

    - name: 23. Wait for the HTTP server to start
      ansible.builtin.wait_for:
        port: 8080
        state: started
        timeout: 30

    - name: 24. Display message that HTTP server started
      ansible.builtin.debug:
        msg: "HTTP server started and is running on port 8080"

    - name: 25. Test the local HTTP server
      ansible.builtin.uri:
        url: "http://localhost:8080"
        return_content: false
      register: local_http_test
      retries: 5
      delay: 2
      until: local_http_test.status == 200

    - name: 26. Fail if local HTTP server test fails
      ansible.builtin.fail:
        msg: "Failed to connect to the local HTTP server. Please check the server and try again."
      when: local_http_test.status != 200

    - name: 27. Start the Cloudflare tunnel
      ansible.builtin.command: >
        cloudflared tunnel
        --config {{ cloudflare_config_file }}
        --origincert {{ cloudflare_certificate_file }}
        run {{ full_tunnel_name }}
      async: 300
      poll: 0
      changed_when: true

    - name: 28. Wait for tunnel to become active
      ansible.builtin.shell: >
        cloudflared tunnel --origincert {{ cloudflare_certificate_file }} info --output json {{ full_tunnel_name }}
      register: tunnel_status
      until: >
        (tunnel_status.stdout | from_json).conns is defined and
        (tunnel_status.stdout | from_json).conns | length > 0 and
        (tunnel_status.stdout | from_json).conns[0].conns is defined and
        (tunnel_status.stdout | from_json).conns[0].conns | selectattr('is_pending_reconnect', 'equalto', false) | list | length > 0
      retries: 20
      delay: 10
      changed_when: false

    - name: 29. Display tunnel status
      ansible.builtin.debug:
        msg:
          - "Tunnel Status:"
          - "{{ tunnel_status.stdout | from_json | to_nice_yaml }}"

    - name: 30. Confirm tunnel is active
      ansible.builtin.debug:
        msg: "Tunnel is up and running successfully."
      when: >
        (tunnel_status.stdout | from_json).conns is defined and
        (tunnel_status.stdout | from_json).conns | length > 0 and
        (tunnel_status.stdout | from_json).conns[0].conns is defined and
        (tunnel_status.stdout | from_json).conns[0].conns | selectattr('is_pending_reconnect', 'equalto', false) | list | length > 0

    - name: 31. Display warning if tunnel is not active
      ansible.builtin.debug:
        msg: >
          Warning: Tunnel does not appear to be fully active.
          Please check the tunnel status output above for more details.
      when: >
        (tunnel_status.stdout | from_json).conns is not defined or
        (tunnel_status.stdout | from_json).conns | length == 0 or
        (tunnel_status.stdout | from_json).conns[0].conns is not defined or
        (tunnel_status.stdout | from_json).conns[0].conns | selectattr('is_pending_reconnect', 'equalto', false) | list | length == 0

    - name: 32. Fail if tunnel does not become active
      ansible.builtin.fail:
        msg: "Tunnel failed to become active within the expected time. Check the tunnel status output above and the Cloudflare configuration, then try again."
      when: tunnel_status is failed

    - name: 33. Test connection through the tunnel for each hostname
      ansible.builtin.uri:
        url: "http://{{ item }}:8080"
        return_content: false
        validate_certs: false
      register: tunnel_tests
      retries: 10
      delay: 10
      until: tunnel_tests.status == 200
      loop: "{{ hostnames }}"
      failed_when: false

    - name: 34. Display test results
      ansible.builtin.debug:
        msg: "Tunnel test for {{ item.item }}: {{ 'successful' if item.status == 200 else 'failed' }}. Status: {{ item.status }}."
      loop: "{{ tunnel_tests.results }}"

    - name: 35. Stop the Cloudflare tunnel
      ansible.builtin.command: >
        cloudflared tunnel
        --origincert {{ cloudflare_certificate_file }}
        --credentials-file {{ cloudflare_credentials_file }}
        cleanup {{ full_tunnel_name }}
      register: tunnel_cleanup
      changed_when: true
      failed_when: tunnel_cleanup.rc != 0 and 'not found' not in tunnel_cleanup.stderr

    - name: 36. Get the process ID of the local HTTP server on port 8080
      ansible.builtin.command: lsof -i :8080
      register: find_process
      changed_when: false
      failed_when: find_process.rc not in [0, 1]

    - name: 37. Kill the local HTTP server process using port 8080
      ansible.builtin.command: kill -9 {{ find_process.stdout_lines[1].split()[1] }}
      when: find_process.stdout_lines | length > 1
      register: kill_result
      failed_when: false
      changed_when: kill_result.rc == 0

    - name: 38. Ensure web server is stopped
      ansible.builtin.wait_for:
        port: 8080
        state: stopped
        timeout: 30

    - name: 39. Output the tunnel information
      ansible.builtin.debug:
        msg:
          - "Certificate file saved to {{ cloudflare_certificate_file }}"
          - "Tunnel {{ full_tunnel_name }} created with ID {{ tunnel_id }}"
          - "Credentials saved to {{ cloudflare_credentials_file }}"
          - "Configuration saved to {{ cloudflare_config_file }}"
          - "To see your tunnel in Cloudflare portal go to: Cloudflare dashboard > Zero Trust > Networks > Tunnels"

    - name: 40. Display final status
      ansible.builtin.debug:
        msg: "Tunnel setup completed successfully and was verified to start correctly."
