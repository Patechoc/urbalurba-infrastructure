---
# file: playbooks/net2-setup-tailscale-cluster.yml
# Description: Set up base Tailscale infrastructure for Kubernetes cluster
#
# This playbook:
# 1. Installs the Tailscale operator
# 2. Configures Tailscale ACLs and HTTPS
# 3. Sets up base ingress configuration
# 4. Handles cluster-wide Tailscale setup
#
# Usage:
#   ansible-playbook playbooks/net2-setup-tailscale-cluster.yml 
#     -e TAILSCALE_CLUSTER_HOSTNAME="rancher-traefik" 
#     -e kubeconfig_path="/path/to/kubeconfig"
#
# Required parameters:
#   TAILSCALE_CLUSTER_HOSTNAME: Base hostname for the cluster ingress
#
# Optional parameters:
#   kubeconfig_path: Path to kubeconfig file (defaults to /mnt/urbalurbadisk/kubeconfig/kubeconf-all)
#   hide_sensitive_info: Whether to hide sensitive information in output (defaults to false)
#
# Related playbooks:
# - net2-expose-tailscale-service.yml: Used to expose individual services after this base setup

- name: Set up Tailscale ingress for Kubernetes cluster
  hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    kubeconfig_path: "{{ kubeconfig_path | default('/mnt/urbalurbadisk/kubeconfig/kubeconf-all') }}"
    operator_config: "010-tailscale-operator-config.yaml"
    ingress_manifest: "011-tailscale-traefik-ingress.yaml"
    traefik_nginx_ingress: "012-traefik-nginx-ingress.yaml"  # New variable for Nginx ingress
    TAILSCALE_CLUSTER_HOSTNAME: "{{ TAILSCALE_CLUSTER_HOSTNAME | default('rancher-traefik') }}"
    api_base_url: "https://api.tailscale.com/api/v2"
    api_timeout: 30
    # Toggle to hide sensitive output
    hide_sensitive_info: "{{ hide_sensitive_info | default(false) }}"
    # Helm parameters
    operator_namespace: "tailscale"
    operator_release_name: "tailscale-operator"
    
  tasks:
    - name: "01 Print playbook description"
      ansible.builtin.debug:
        msg: "Setting up Tailscale ingress on Kubernetes cluster with hostname: {{ TAILSCALE_CLUSTER_HOSTNAME }}"

    - name: "02 Verify kubeconfig file exists"
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat

    - name: "03 Fail if kubeconfig file does not exist"
      ansible.builtin.fail:
        msg: "Kubeconfig file not found at {{ kubeconfig_path }}"
      when: not kubeconfig_stat.stat.exists

    - name: "04 Retrieve Tailscale secrets from urbalurba-secrets"
      kubernetes.core.k8s_info:
        kind: Secret
        name: urbalurba-secrets
        namespace: default
        kubeconfig: "{{ kubeconfig_path }}"
      register: urbalurba_secrets
      no_log: "{{ hide_sensitive_info }}"

    - name: "05 Extract Tailscale credentials"
      ansible.builtin.set_fact:
        tailscale_clientid: "{{ urbalurba_secrets.resources[0].data.TAILSCALE_CLIENTID | b64decode }}"
        tailscale_clientsecret: "{{ urbalurba_secrets.resources[0].data.TAILSCALE_CLIENTSECRET | b64decode }}"
        tailscale_tailnet: "{{ urbalurba_secrets.resources[0].data.TAILSCALE_TAILNET | b64decode }}"
        tailscale_domain: "{{ urbalurba_secrets.resources[0].data.TAILSCALE_DOMAIN | b64decode }}"
      when: urbalurba_secrets.resources | length > 0
      no_log: "{{ hide_sensitive_info }}"

    - name: "06 Print redacted Tailscale info for verification"
      ansible.builtin.debug:
        msg: 
          - "Tailscale client ID: {{ tailscale_clientid | regex_replace('^(.{4}).*(.{4})$', '\\1...\\2') if tailscale_clientid is defined else 'Not found' }}"
          - "Tailscale tailnet: {{ tailscale_tailnet if tailscale_tailnet is defined else 'Not found' }}"
      when: not hide_sensitive_info

    - name: "07 Ensure Tailscale credentials were retrieved"
      ansible.builtin.fail:
        msg: "Failed to retrieve Tailscale credentials from urbalurba-secrets."
      when: tailscale_clientid is not defined or tailscale_clientsecret is not defined or tailscale_tailnet is not defined

    - name: "08 Verify Tailscale tailnet exists"
      uri:
        url: "{{ api_base_url }}/tailnet/{{ tailscale_tailnet }}"
        headers:
          Authorization: "Basic {{ (tailscale_clientid + ':' + tailscale_clientsecret) | b64encode }}"
        method: GET
        timeout: "{{ api_timeout }}"
        status_code: [200, 404]
      register: tailnet_response
      no_log: "{{ hide_sensitive_info }}"
      failed_when: false

    - name: "09 Fail if tailnet does not exist"
      ansible.builtin.fail:
        msg: "Tailnet '{{ tailscale_tailnet }}' does not exist or credentials are invalid"
      when: tailnet_response.status == 404

    - name: "10 Check if Tailscale HTTPS is enabled for tailnet"
      uri:
        url: "{{ api_base_url }}/tailnet/{{ tailscale_tailnet }}/features"
        headers:
          Authorization: "Basic {{ (tailscale_clientid + ':' + tailscale_clientsecret) | b64encode }}"
        method: GET
        timeout: "{{ api_timeout }}"
        status_code: [200, 404]
      register: features_response
      no_log: "{{ hide_sensitive_info }}"
      failed_when: false

    - name: "11 Enable HTTPS for tailnet if not already enabled"
      uri:
        url: "{{ api_base_url }}/tailnet/{{ tailscale_tailnet }}/features/https"
        headers:
          Authorization: "Basic {{ (tailscale_clientid + ':' + tailscale_clientsecret) | b64encode }}"
        method: POST
        body_format: json
        body:
          enabled: true
        timeout: "{{ api_timeout }}"
        status_code: 200
      register: enable_https_response
      no_log: "{{ hide_sensitive_info }}"
      failed_when: false
      when: features_response.status == 200 and not (features_response.json.https.enabled | default(false))

    - name: "12 Get current ACL policy"
      uri:
        url: "{{ api_base_url }}/tailnet/{{ tailscale_tailnet }}/acl"
        headers:
          Authorization: "Basic {{ (tailscale_clientid + ':' + tailscale_clientsecret) | b64encode }}"
        method: GET
        timeout: "{{ api_timeout }}"
        status_code: [200, 404]
      register: acl_response
      no_log: "{{ hide_sensitive_info }}"
      failed_when: false

    - name: "13 Check if ACL policy needs to be updated"
      ansible.builtin.set_fact:
        acl_needs_update: "{{ acl_response.status == 200 and not ('nodeAttrs' in acl_response.json and
                             acl_response.json.nodeAttrs | selectattr('target', 'contains', 'tag:k8s') | 
                             selectattr('attr', 'contains', 'funnel') | list | length > 0) }}"
      when: acl_response.status == 200

    - name: "14 Create temp file for ACL policy updates"
      ansible.builtin.tempfile:
        state: file
        suffix: .json
      register: temp_acl_file
      when: acl_response.status == 200 and acl_needs_update is defined and acl_needs_update | bool

    - name: "15 Prepare updated ACL policy with Funnel node attributes"
      ansible.builtin.set_fact:
        updated_acl: "{{ acl_response.json | combine({'nodeAttrs': (acl_response.json.nodeAttrs | default([]) + 
                      [{'target': ['tag:k8s'], 'attr': ['funnel']}])}) }}"
      when: acl_response.status == 200 and acl_needs_update is defined and acl_needs_update | bool

    - name: "16 Write updated ACL policy to temp file"
      ansible.builtin.copy:
        content: "{{ updated_acl | to_json(indent=2) }}"
        dest: "{{ temp_acl_file.path }}"
      when: acl_response.status == 200 and updated_acl is defined

    - name: "17 Update ACL policy with Funnel node attributes"
      uri:
        url: "{{ api_base_url }}/tailnet/{{ tailscale_tailnet }}/acl"
        headers:
          Authorization: "Basic {{ (tailscale_clientid + ':' + tailscale_clientsecret) | b64encode }}"
        method: POST
        body_format: json
        body: "{{ updated_acl }}"
        timeout: "{{ api_timeout }}"
        status_code: 200
      register: update_acl_response
      no_log: "{{ hide_sensitive_info }}"
      failed_when: false
      when: acl_response.status == 200 and updated_acl is defined

    - name: "18 Add Tailscale Helm repository"
      kubernetes.core.helm_repository:
        name: tailscale
        repo_url: https://pkgs.tailscale.com/helmcharts
        kubeconfig: "{{ kubeconfig_path }}"

    - name: "19 Create values file with Tailscale credentials for Helm"
      ansible.builtin.tempfile:
        state: file
        suffix: .yaml
      register: temp_values_file

    - name: "20 Write id values to temporary file"
      ansible.builtin.copy:
        content: |
          oauth:
            clientId: "{{ tailscale_clientid }}"
            clientSecret: "{{ tailscale_clientsecret }}"
        dest: "{{ temp_values_file.path }}"
      no_log: "{{ hide_sensitive_info }}"

    - name: "21 Install Tailscale operator using Helm module"
      kubernetes.core.helm:
        name: "{{ operator_release_name }}"
        chart_ref: tailscale/tailscale-operator
        release_namespace: "{{ operator_namespace }}"
        create_namespace: true
        values_files:
          - "{{ manifests_folder }}/{{ operator_config }}"
          - "{{ temp_values_file.path }}"
        wait: true
        kubeconfig: "{{ kubeconfig_path }}"
      register: helm_result

    - name: "22 Check if Tailscale operator deployment exists"
      kubernetes.core.k8s_info:
        kind: Deployment
        name: operator
        namespace: "{{ operator_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: operator_deployment
      ignore_errors: true

    - name: "22a Show operator deployment status if available"
      ansible.builtin.debug:
        msg: "Operator deployment found. Status: {{ operator_deployment.resources[0].status if operator_deployment.resources else 'Not found' }}"
      when: operator_deployment.resources | length > 0

    - name: "22b Check operator pod status regardless of label"
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ operator_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: all_pods
      ignore_errors: true

    - name: "22c Display all pods in operator namespace for diagnostics"
      ansible.builtin.debug:
        msg: "Pods in {{ operator_namespace }} namespace: {{ all_pods.resources | map(attribute='metadata.name') | list if all_pods.resources else 'None found' }}"

    - name: "22d Wait for Tailscale operator pod to be ready with modified selector"
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ operator_namespace }}"
        label_selectors:
          - "app=operator"
        kubeconfig: "{{ kubeconfig_path }}"
      register: operator_pods
      until: operator_pods.resources | length > 0 and (operator_pods.resources | map(attribute='status.phase') | list | unique == ['Running'])
      retries: 5
      delay: 10
      ignore_errors: true

    - name: "23 Create temp file for Ingress manifest with substituted hostname"
      ansible.builtin.tempfile:
        state: file
        suffix: .yaml
      register: temp_ingress_file

    - name: "24 Apply variable substitution to Ingress manifest template"
      ansible.builtin.template:
        src: "{{ manifests_folder }}/{{ ingress_manifest }}"
        dest: "{{ temp_ingress_file.path }}"
      vars:
        TAILSCALE_CLUSTER_HOSTNAME: "{{ TAILSCALE_CLUSTER_HOSTNAME }}"

    - name: "25 Apply Tailscale Ingress configuration"
      kubernetes.core.k8s:
        src: "{{ temp_ingress_file.path }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
      register: ingress_result

    - name: "26 Clean up temporary files"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ temp_ingress_file.path | default('') }}"
        - "{{ temp_acl_file.path | default('') }}"
        - "{{ temp_values_file.path | default('') }}"
      when: item != ''

    # New steps begin here (added after step 26)
    - name: "27 Check if Nginx service exists"
      kubernetes.core.k8s_info:
        kind: Service
        name: nginx
        namespace: default
        kubeconfig: "{{ kubeconfig_path }}"
      register: nginx_service
      ignore_errors: true

    - name: "28 Apply Traefik-Nginx Ingress if Nginx service exists"
      kubernetes.core.k8s:
        src: "{{ manifests_folder }}/{{ traefik_nginx_ingress }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
      when: nginx_service.resources is defined and nginx_service.resources | length > 0
      register: nginx_ingress_result

    - name: "29 Display Nginx Ingress result"
      ansible.builtin.debug:
        msg: "Nginx Ingress configuration applied successfully. Traefik will now route traffic to Nginx."
      when: nginx_service.resources is defined and nginx_service.resources | length > 0 and nginx_ingress_result.changed | default(false)

    - name: "30 Display Nginx service not found message"
      ansible.builtin.debug:
        msg: "Nginx service not found. Skipping Traefik-Nginx ingress configuration."
      when: nginx_service.resources is not defined or nginx_service.resources | length == 0
    # New steps end here

    - name: "31 Display Tailscale ingress information"
      ansible.builtin.debug:
        msg: 
          - "Tailscale ingress setup completed."
          - "Your service will be available at: https://{{ TAILSCALE_CLUSTER_HOSTNAME }}.{{ tailscale_domain }}"
          - "Note: It may take a few minutes for DNS to propagate and TLS certificates to be provisioned."

    - name: "32 Display verification instructions"
      ansible.builtin.debug:
        msg:
          - "To verify the ingress is working, try these commands:"
          - "kubectl --kubeconfig={{ kubeconfig_path }} get pods -n {{ operator_namespace }}"
          - "kubectl --kubeconfig={{ kubeconfig_path }} get ingress -n kube-system"
          - "curl -v https://{{ TAILSCALE_CLUSTER_HOSTNAME }}.{{ tailscale_domain }}"