---
# file: playbooks/010-move-hostpath-storage.yml
# This playbook moves the hostpath-storage in MicroK8s to a custom storage root by copying the data and creating a symbolic link.
# Usage: ansible-playbook playbooks/010-move-hostpath-storage.yml -e target_host="multipass-microk8s"

- name: Move hostpath-storage on MicroK8s to custom location
  hosts: localhost
  gather_facts: false
  vars:
    target_host: "{{ target_host | default('') }}"
    old_storage_path: "/var/snap/microk8s/common/default-storage"
    new_storage_path: "/mnt/urbalurbadisk/kubernetesstorage"
    backup_storage_path: "{{ old_storage_path }}.bak"

  tasks:
    - name: 1. Check if target_host is provided
      ansible.builtin.fail:
        msg: >-
          The variable 'target_host' is mandatory.
          Use -e target_host=your_host_name to specify it.
      when: not target_host

    - name: 2. Print playbook description
      ansible.builtin.debug:
        msg: >-
          Moving hostpath-storage on MicroK8s on host: {{ target_host }}
          from {{ old_storage_path }} to {{ new_storage_path }}.
          Backup will be stored at {{ backup_storage_path }}.

    - name: 3. Check if old storage path exists
      ansible.builtin.stat:
        path: "{{ old_storage_path }}"
      register: old_storage_stat
      delegate_to: "{{ target_host }}"
      become: true

    - name: 4. Create new storage path if it doesn't exist
      ansible.builtin.file:
        path: "{{ new_storage_path }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      delegate_to: "{{ target_host }}"
      become: true

    - name: 5. Stop MicroK8s
      ansible.builtin.command: microk8s stop
      delegate_to: "{{ target_host }}"
      become: true

    - name: 6. Wait for MicroK8s to stop
      ansible.builtin.shell: |
        for i in {1..30}; do
          if ! microk8s status | grep -q "is running"; then
            echo "stopped"
            exit 0
          fi
          sleep 1
        done
        echo "not stopped"
        exit 1
      register: stop_result
      until: stop_result.stdout == "stopped"
      retries: 3
      delay: 5
      delegate_to: "{{ target_host }}"
      become: true

    - name: 7. Fail if MicroK8s did not stop
      ansible.builtin.fail:
        msg: "MicroK8s did not stop within the allocated time. Please check the MicroK8s status manually."
      when: stop_result.stdout != "stopped"

    - name: 8. Copy existing data to the new location
      ansible.builtin.command: rsync -av {{ old_storage_path }}/ {{ new_storage_path }}/
      delegate_to: "{{ target_host }}"
      become: true
      when: old_storage_stat.stat.exists

    - name: 9. Rename old storage directory to backup
      ansible.builtin.command: mv {{ old_storage_path }} {{ backup_storage_path }}
      delegate_to: "{{ target_host }}"
      become: true
      when: old_storage_stat.stat.exists

    - name: 10. Create symbolic link
      ansible.builtin.file:
        src: "{{ new_storage_path }}"
        dest: "{{ old_storage_path }}"
        state: link
        owner: root
        group: root
      delegate_to: "{{ target_host }}"
      become: true

    - name: 11. Start MicroK8s
      ansible.builtin.command: microk8s start
      delegate_to: "{{ target_host }}"
      become: true

    - name: 12. Wait for MicroK8s to be ready
      ansible.builtin.command: microk8s status --wait-ready
      delegate_to: "{{ target_host }}"
      become: true
      register: microk8s_ready
      until: microk8s_ready.rc == 0
      retries: 30
      delay: 10

    - name: 13. Verify symbolic link
      ansible.builtin.stat:
        path: "{{ old_storage_path }}"
      register: symlink_stat
      delegate_to: "{{ target_host }}"
      become: true

    - name: 14. Display symbolic link information
      ansible.builtin.debug:
        msg: >-
          Symbolic link created: {{ symlink_stat.stat.islnk }}
          Link target: {{ symlink_stat.stat.lnk_target }}

    - name: 15. Final message
      ansible.builtin.debug:
        msg: >-
          Hostpath-storage has been successfully moved to {{ new_storage_path }}.
          A symbolic link has been created at {{ old_storage_path }} pointing to the new location.
          Please verify that everything is working correctly. The old data is backed up at {{ backup_storage_path }}.
