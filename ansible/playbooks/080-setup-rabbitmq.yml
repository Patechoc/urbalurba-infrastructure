---
# file: ansible/playbooks/080-setup-rabbitmq.yml
# Set up RabbitMQ on microk8s cluster using the Bitnami Helm chart
# e.g., ansible-playbook playbooks/080-setup-rabbitmq.yml -e target_host="multipass-microk8s"
# TODO: target_host is not used - so it will use the last context in kubeconf-all

- hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"

  tasks:
    - name: Check if target_host is provided
      ansible.builtin.fail:
        msg: "The variable 'target_host' is mandatory. Use -e target_host=your_host_name to specify it."
      when: target_host is not defined

    - name: Print playbook description
      ansible.builtin.debug:
        msg: "Setting up RabbitMQ on MicroK8s on Ubuntu host: {{ target_host }} with manifests from: {{ manifests_folder }}. Use -e target_host=your_host_name to change settings."

    # We'll skip creating the configmap for now to simplify the installation
    - name: Print configmap info
      ansible.builtin.debug:
        msg: "Using default RabbitMQ configuration for a minimal installation."

    - name: Deploy RabbitMQ using Helm
      ansible.builtin.command: >
        helm install rabbitmq bitnami/rabbitmq 
        -f {{ manifests_folder }}/080-rabbitmq-config.yaml
        --timeout 10m
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"

    - name: Wait for RabbitMQ pod to be ready
      ansible.builtin.command: >
        kubectl wait --for=condition=ready pod 
        -l app.kubernetes.io/name=rabbitmq 
        --timeout=600s 
        --kubeconfig {{ merged_kubeconf_file }}
      register: wait_result
      until: wait_result.rc == 0
      retries: 10
      delay: 30

    - name: Verify RabbitMQ service is running
      ansible.builtin.command: kubectl get svc --namespace default --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_svc

    - name: Display RabbitMQ service details
      ansible.builtin.debug:
        var: rabbitmq_svc.stdout_lines

    - name: Get RabbitMQ pod name
      ansible.builtin.command: >
        kubectl get pods -n default -l app.kubernetes.io/name=rabbitmq -o jsonpath='{.items[0].metadata.name}' 
        --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_pod_name

    - name: Display RabbitMQ pod name
      ansible.builtin.debug:
        var: rabbitmq_pod_name.stdout

    - name: Check if RabbitMQ pod is ready
      ansible.builtin.command: >
        kubectl get pod {{ rabbitmq_pod_name.stdout }} -o jsonpath='{.status.containerStatuses[0].ready}'
        --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_ready
      
    - name: Display pod ready status
      ansible.builtin.debug:
        var: rabbitmq_ready.stdout

    - name: Check RabbitMQ AMQP port
      ansible.builtin.command: >
        kubectl get svc rabbitmq -o jsonpath='{.spec.ports[?(@.name=="amqp")].port}' 
        --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_amqp_port

    - name: Display RabbitMQ AMQP port
      ansible.builtin.debug:
        var: rabbitmq_amqp_port.stdout

    - name: Check RabbitMQ management port
      ansible.builtin.command: >
        kubectl get svc rabbitmq -o jsonpath='{.spec.ports[?(@.name=="http-stats")].port}' 
        --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_mgmt_port
      
    - name: Display RabbitMQ management port
      ansible.builtin.debug:
        var: rabbitmq_mgmt_port.stdout

    - name: Get RabbitMQ service ClusterIP
      ansible.builtin.command: >
        kubectl get svc rabbitmq -o jsonpath='{.spec.clusterIP}' 
        --kubeconfig {{ merged_kubeconf_file }}
      register: rabbitmq_ip
      ignore_errors: true

    - name: Display RabbitMQ ClusterIP
      ansible.builtin.debug:
        var: rabbitmq_ip.stdout
      when: rabbitmq_ip.stdout is defined

    - name: Get RabbitMQ password
      ansible.builtin.shell: >
        kubectl get secret --namespace default rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode
      register: rabbitmq_password
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      ignore_errors: true
      
    - name: Display RabbitMQ connection credentials
      ansible.builtin.debug:
        msg: |
          RabbitMQ has been successfully deployed:
          - Username: user
          - Password: {{ rabbitmq_password.stdout | default('bitnami') }}
          - ClusterIP: {{ rabbitmq_ip.stdout }}
          - AMQP Port: {{ rabbitmq_amqp_port.stdout }}
          - Management UI Port: {{ rabbitmq_mgmt_port.stdout }}
          
    - name: Display kubectl port-forward command for management UI
      ansible.builtin.debug:
        msg: "To access the management UI locally, run: kubectl port-forward svc/rabbitmq 15672:15672"
          
    - name: Confirm RabbitMQ is working
      ansible.builtin.debug:
        msg: "RabbitMQ pod ready status: {{ rabbitmq_ready.stdout }}. If 'true', RabbitMQ is working properly."