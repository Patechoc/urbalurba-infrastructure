---
# file: ansible/playbooks/argocd-register-app.yml (improved version)
# Register an application with ArgoCD by creating necessary Kubernetes resources
# This playbook will:
#   - Create a namespace with the same name as the repository
#   - Create a GitHub credentials secret in the argocd namespace
#   - Register the application with ArgoCD
#   - Wait for the application to be synced and healthy
#   - Verify all required resources are created and running
#   - Provide clear connection instructions
#
# Required Variables:
#   github_username: GitHub username for repository access
#   repo_name: Name of the GitHub repository to register (will be used as namespace)
#   github_pat: GitHub Personal Access Token for authentication
#
# Usage:
#   ansible-playbook ansible/playbooks/argocd-register-app.yml \
#     -e "github_username=your_username" \
#     -e "repo_name=your_repo" \
#     -e "github_pat=your_token"

- name: Register application with ArgoCD
  hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"
    argocd_namespace: "argocd"
    github_secret_name: "github-{{ repo_name }}"
    github_secret_username_key: "username"
    github_secret_password_key: "password"
    retry_delay: 10
    max_retries: 30
    wait_timeout: 300 
    local_port_forward: 8000

  tasks:
    - name: 1. Check if required variables are provided
      ansible.builtin.fail:
        msg: "The variable 'github_username' is mandatory. Use -e github_username=your_username to specify it."
      when: github_username is not defined

    - name: 2. Check if repo_name is provided
      ansible.builtin.fail:
        msg: "The variable 'repo_name' is mandatory. Use -e repo_name=your_repo to specify it."
      when: repo_name is not defined

    - name: 3. Check if github_pat is provided
      ansible.builtin.fail:
        msg: "The variable 'github_pat' is mandatory. Use -e github_pat=your_token to specify it."
      when: github_pat is not defined

    - name: 4. Print playbook description
      ansible.builtin.debug:
        msg: >
          Registering application with ArgoCD:
          - Repository: {{ github_username }}/{{ repo_name }}
          - Namespace: {{ repo_name }}
          - ArgoCD Namespace: {{ argocd_namespace }}
          - Wait timeout: {{ wait_timeout }} seconds

    - name: 5. Create namespace for the application
      kubernetes.core.k8s:
        name: "{{ repo_name }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ merged_kubeconf_file }}"

    - name: 6. Create GitHub credentials secret
      kubernetes.core.k8s:
        name: "{{ github_secret_name }}"
        namespace: "{{ argocd_namespace }}"
        api_version: v1
        kind: Secret
        state: present
        kubeconfig: "{{ merged_kubeconf_file }}"
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ github_secret_name }}"
            namespace: "{{ argocd_namespace }}"
          type: Opaque
          stringData:
            type: git
            url: "https://github.com/{{ github_username }}/{{ repo_name }}.git"
            username: "{{ github_username }}"
            password: "{{ github_pat }}"

    - name: 7. Create ArgoCD Application
      kubernetes.core.k8s:
        name: "{{ repo_name }}"
        namespace: "{{ argocd_namespace }}"
        api_version: argoproj.io/v1alpha1
        kind: Application
        state: present
        kubeconfig: "{{ merged_kubeconf_file }}"
        definition:
          metadata:
            name: "{{ repo_name }}"
            namespace: "{{ argocd_namespace }}"
          spec:
            project: default
            source:
              repoURL: "https://github.com/{{ github_username }}/{{ repo_name }}.git"
              targetRevision: HEAD
              path: manifests
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ repo_name }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true

    - name: 8. Wait for ArgoCD Application to be created
      kubernetes.core.k8s_info:
        kind: Application
        name: "{{ repo_name }}"
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
        api_version: argoproj.io/v1alpha1
      register: argocd_app
      until: argocd_app.resources | length > 0
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      changed_when: false

    - name: 9. Display initial ArgoCD Application status
      ansible.builtin.debug:
        msg: 
          - "ArgoCD Application created. Current status:"
          - "Health Status: {{ argocd_app.resources[0].status.health.status | default('Unknown') }}"
          - "Sync Status: {{ argocd_app.resources[0].status.sync.status | default('Unknown') }}"
      when: argocd_app.resources | length > 0

    # Wait for sync status to not be 'Unknown'
    - name: 10. Wait for ArgoCD application to start syncing
      kubernetes.core.k8s_info:
        kind: Application
        name: "{{ repo_name }}"
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
        api_version: argoproj.io/v1alpha1
      register: app_status
      until: >
        app_status.resources | length > 0 and
        app_status.resources[0].status.sync.status is defined and
        app_status.resources[0].status.sync.status != 'Unknown'
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      changed_when: false

    - name: 11. Check if sync timeout occurred
      ansible.builtin.fail:
        msg: "Timeout waiting for ArgoCD application to start syncing"
      when: >
        app_status.resources[0].status.sync.status is not defined or 
        app_status.resources[0].status.sync.status == 'Unknown'

    - name: 12. Display sync in progress status
      ansible.builtin.debug:
        msg: 
          - "Sync has started. Current status:"
          - "Health Status: {{ app_status.resources[0].status.health.status | default('Unknown') }}"
          - "Sync Status: {{ app_status.resources[0].status.sync.status | default('Unknown') }}"
      when: app_status.resources | length > 0

    # Wait for sync status to be 'Synced'
    - name: 13. Wait for sync status to be 'Synced'
      kubernetes.core.k8s_info:
        kind: Application
        name: "{{ repo_name }}"
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
        api_version: argoproj.io/v1alpha1
      register: sync_status
      until: >
        sync_status.resources | length > 0 and
        sync_status.resources[0].status.sync.status is defined and
        sync_status.resources[0].status.sync.status == 'Synced'
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      changed_when: false

    - name: 14. Check if sync completion timeout occurred
      ansible.builtin.fail:
        msg: "Timeout waiting for ArgoCD application to be synced. Current status: {{ sync_status.resources[0].status.sync.status | default('Unknown') }}"
      when: >
        sync_status.resources[0].status.sync.status is not defined or 
        sync_status.resources[0].status.sync.status != 'Synced'

    - name: 15. Display sync complete status
      ansible.builtin.debug:
        msg: 
          - "Application has been synced successfully."
          - "Health Status: {{ sync_status.resources[0].status.health.status | default('Unknown') }}"
          - "Sync Status: {{ sync_status.resources[0].status.sync.status }}"
      when: sync_status.resources | length > 0

    # Wait for health status to be 'Healthy'
    - name: 16. Wait for health status to be 'Healthy'
      kubernetes.core.k8s_info:
        kind: Application
        name: "{{ repo_name }}"
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
        api_version: argoproj.io/v1alpha1
      register: health_status
      until: >
        health_status.resources | length > 0 and
        health_status.resources[0].status.health.status is defined and
        health_status.resources[0].status.health.status == 'Healthy'
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      changed_when: false

    - name: 17. Check if health timeout occurred
      ansible.builtin.fail:
        msg: "Timeout waiting for ArgoCD application to be healthy. Current status: {{ health_status.resources[0].status.health.status | default('Unknown') }}"
      when: >
        health_status.resources[0].status.health.status is not defined or 
        health_status.resources[0].status.health.status != 'Healthy'

    - name: 18. Display health status
      ansible.builtin.debug:
        msg: 
          - "Application is now healthy."
          - "Health Status: {{ health_status.resources[0].status.health.status }}"
          - "Sync Status: {{ health_status.resources[0].status.sync.status }}"
      when: health_status.resources | length > 0

    # Check for resources in the namespace
    - name: 19. Get all pods in the application namespace
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ repo_name }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
      register: namespace_pods
      changed_when: false

    - name: 20. Display pods in namespace
      ansible.builtin.debug:
        msg: "Pods in namespace {{ repo_name }}: {{ namespace_pods.resources | map(attribute='metadata.name') | list }}"
      when: namespace_pods.resources | length > 0

    # Wait for all pods to be running
    - name: 21. Wait for all pods to be in Running state
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ repo_name }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
      register: pod_status
      until: >
        pod_status.resources | length > 0 and
        pod_status.resources | selectattr('status.phase', 'ne', 'Running') | list | length == 0
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      changed_when: false
      when: namespace_pods.resources | length > 0

    - name: 22. Check if pod readiness timeout occurred
      ansible.builtin.fail:
        msg: "Timeout waiting for pods to be in Running state. Current status: {{ pod_status.resources | map(attribute='status.phase') | list }}"
      when: >
        namespace_pods.resources | length > 0 and
        pod_status.resources | selectattr('status.phase', 'ne', 'Running') | list | length > 0

    # Check services
    - name: 23. Get all services in the application namespace
      kubernetes.core.k8s_info:
        kind: Service
        namespace: "{{ repo_name }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
      register: service_info
      changed_when: false

    # Extract service information for user connection instructions
    - name: 24. Get service connection details
      ansible.builtin.set_fact:
        service_name: "{{ service_info.resources[0].metadata.name | default(repo_name + '-service') }}"
        service_port: "{{ service_info.resources[0].spec.ports[0].port | default(80) }}"
        service_port_name: "{{ service_info.resources[0].spec.ports[0].name | default('http') }}"
        service_target_port: "{{ service_info.resources[0].spec.ports[0].targetPort | default('80') }}"
      when: service_info.resources | length > 0

    # Check ingresses
    - name: 25. Get all ingresses in the application namespace
      kubernetes.core.k8s_info:
        kind: Ingress
        namespace: "{{ repo_name }}"
        kubeconfig: "{{ merged_kubeconf_file }}"
      register: ingress_info
      changed_when: false

    # Extract ingress information if available
    - name: 26. Get ingress host information
      ansible.builtin.set_fact:
        ingress_host: "{{ ingress_info.resources[0].spec.rules[0].host | default(repo_name + '.local') }}"
      when: ingress_info.resources | length > 0

    # Final report
    - name: 27. Display final summary
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "🎉 APPLICATION REGISTRATION SUCCESSFUL! 🎉"
          - "=================================================="
          - "Application '{{ repo_name }}' registered in ArgoCD"
          - "GitHub credentials stored in secret '{{ github_secret_name }}'"
          - "Namespace '{{ repo_name }}' created and resources deployed"
          - ""
          - "🔹 ArgoCD Status"
          - "   Health: {{ health_status.resources[0].status.health.status }}"
          - "   Sync: {{ health_status.resources[0].status.sync.status }}"
          - ""
          - "🔹 Kubernetes Resources"
          - "   Pods: {{ namespace_pods.resources | map(attribute='metadata.name') | list | length }}"
          - "   Services: {{ service_info.resources | map(attribute='metadata.name') | list | length }}"
          - "   Ingress: {{ ingress_info.resources | map(attribute='metadata.name') | list | length }}"
          - ""
          - "🔍 To check deployment status, use the ArgoCD UI:"
          - "   Open http://argocd.localhost in your browser"
          - ""
          - "💡 Service Information:"
          - "   Name: {{ service_name }}"
          - "   Port: {{ service_port }} (Type: {{ service_port_name }})"
          - "   Target Port: {{ service_target_port }}"
          - ""
          - " Visit your application at: http://{{ ingress_host }}"
          - ""
          - "✅ Registration and deployment complete!"
      when: service_info.resources | length > 0

    # Fallback message if no services were found
    - name: 28. Display final summary (no services)
      ansible.builtin.debug:
        msg:
          - "=================================================="
          - "⚠️ APPLICATION REGISTRATION INCOMPLETE ⚠️"
          - "=================================================="
          - "Application '{{ repo_name }}' registered in ArgoCD"
          - "GitHub credentials stored in secret '{{ github_secret_name }}'"
          - "Namespace '{{ repo_name }}' created and resources deployed"
          - ""
          - "🔹 ArgoCD Status"
          - "   Health: {{ health_status.resources[0].status.health.status }}"
          - "   Sync: {{ health_status.resources[0].status.sync.status }}"
          - ""
          - "❌ NO SERVICES DETECTED. Your application cannot be accessed!"
          - "This usually indicates a problem with your Kubernetes manifests."
          - "Please check your deployment.yaml to ensure it includes a Service definition."
          - ""
          - "🔍 To check deployment status, use the ArgoCD UI:"
          - "   Open http://argocd.localhost in your browser"
          - ""
          - "⚠️ Registration completed but deployment requires attention!"
      when: service_info.resources | length == 0