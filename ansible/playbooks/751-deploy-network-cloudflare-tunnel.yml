---
# file: playbooks/751-deploy-network-cloudflare-tunnel.yml
# Description: This playbook installs Cloudflared on the target host if not present,
# then deploys a Cloudflare tunnel to a Kubernetes cluster.
# It uses files created by the 750-setup-network-cloudflare-tunnel.yml playbook.
#
# Usage:
# ansible-playbook 751-deploy-network-cloudflare-tunnel.yml \
#   -e tunnel_name="nerdmeet-test" \
#   -e domain="nerdmeet.org" \
#   -e '{"subdomains": ["www-test", "api-test"]}' \
#   -e target_host="multipass-microk8s"
#
# Required variables:
#   - tunnel_name: Name of the Cloudflare tunnel (e.g., "nerdmeet-test")
#   - domain: Domain name for the tunnel (e.g., "nerdmeet.org")
#   - subdomains: List of subdomains to be used with the tunnel (e.g., ["www-test", "api-test"])
#   - target_host: The host where Cloudflared will be installed and the Kubernetes cluster is running

- name: Check required variables
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Ensure required variables are provided
      fail:
        msg: "tunnel_name, domain, and target_host must be provided."
      when: tunnel_name is not defined or domain is not defined or target_host is not defined

- name: Install Cloudflared on target host
  hosts: "{{ target_host }}"
  become: true
  gather_facts: true
  vars:
    tunnel_name: "{{ tunnel_name }}"
    domain: "{{ domain }}"
    subdomains: "{{ subdomains | default([]) }}"

  tasks:
    - name: 1. Check if Cloudflared is already installed
      command: cloudflared --version
      register: cloudflared_check
      ignore_errors: true
      changed_when: false

    - name: 2. Install Cloudflared if not present
      block:
        - name: 2.1. Create keyrings directory
          file:
            path: /usr/share/keyrings
            state: directory
            mode: '0755'

        - name: 2.2. Add Cloudflare GPG key
          get_url:
            url: https://pkg.cloudflare.com/cloudflare-main.gpg
            dest: /usr/share/keyrings/cloudflare-main.gpg

        - name: 2.3. Add Cloudflared repository
          apt_repository:
            repo: deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main
            state: present
            filename: cloudflared

        - name: 2.4. Update apt cache
          apt:
            update_cache: true

        - name: 2.5. Install Cloudflared
          apt:
            name: cloudflared
            state: present

        - name: 2.6. Verify Cloudflared installation
          command: cloudflared --version
          register: cloudflared_version
          changed_when: false

        - name: 2.7. Display Cloudflared version
          debug:
            var: cloudflared_version.stdout

      when: cloudflared_check.rc != 0

- name: Deploy Cloudflare Tunnel to Kubernetes
  hosts: localhost
  gather_facts: false
  collections:
    - kubernetes.core
  vars:
    tunnel_name: "{{ tunnel_name }}"
    domain: "{{ domain }}"
    subdomains: "{{ subdomains | default([]) }}"
    full_tunnel_name: "cloudflare-{{ tunnel_name }}-tunnel"
    cloudflarefolder: "/mnt/urbalurbadisk/cloudflare/"
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"
    cloudflare_credentials_file: "{{ cloudflarefolder }}{{ full_tunnel_name }}.json"
    cloudflare_kubernetes_template_file: "{{ manifests_folder }}/751-cloudflare-tunnel-base.yaml.j2"

  tasks:
    - name: 3. Read Cloudflare credentials file
      slurp:
        src: "{{ cloudflare_credentials_file }}"
      register: cloudflare_credentials

    - name: 4. Extract credentials and tunnel ID
      block:
        - name: 4.1 Parse credentials JSON
          set_fact:
            credentials_json: "{{ cloudflare_credentials['content'] | b64decode | from_json }}"

        - name: 4.2 Extract individual fields
          set_fact:
            account_tag: "{{ credentials_json.AccountTag }}"
            tunnel_secret: "{{ credentials_json.TunnelSecret }}"
            tunnel_id: "{{ credentials_json.TunnelID }}"

        - name: 4.3 Print extracted credentials (WARNING Sensitive information)
          debug:
            msg:
              - "Account Tag: {{ account_tag }}"
              - "Tunnel Secret: {{ tunnel_secret }}"
              - "Tunnel ID: {{ tunnel_id }}"

    - name: 5. Check if secret already exists
      kubernetes.core.k8s_info:
        kubeconfig: "{{ merged_kubeconf_file }}"
        kind: Secret
        name: "{{ full_tunnel_name }}-credentials"
        namespace: default
      register: existing_secret

    - name: 6. Print existing secret status
      debug:
        msg: "Secret {{ 'exists' if existing_secret.resources else 'does not exist' }}"

    - name: 7. Create Kubernetes secret for Cloudflare credentials
      kubernetes.core.k8s:
        kubeconfig: "{{ merged_kubeconf_file }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ full_tunnel_name }}-credentials"
            namespace: default
          type: Opaque
          data:
            credentials.json: "{{ cloudflare_credentials['content'] }}"

    - name: 8. Debug - Print K8s Secret Definition
      debug:
        msg: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ full_tunnel_name }}-credentials"
            namespace: default
          type: Opaque
          data:
            credentials.json: "{{ cloudflare_credentials['content'] | replace('\n', '') }}"

    - name: 9. Create Cloudflare tunnel manifest from template
      template:
        src: "{{ cloudflare_kubernetes_template_file }}"
        dest: "{{ manifests_folder }}/{{ full_tunnel_name }}-manifest.yaml"

    - name: 10. Display contents of the generated manifest
      command: cat "{{ manifests_folder }}/{{ full_tunnel_name }}-manifest.yaml"
      register: manifest_contents

    - name: 11. Apply Cloudflare tunnel manifest
      kubernetes.core.k8s:
        kubeconfig: "{{ merged_kubeconf_file }}"
        src: "{{ manifests_folder }}/{{ full_tunnel_name }}-manifest.yaml"
        state: present

    - name: 12. Wait for Cloudflare tunnel pod to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ merged_kubeconf_file }}"
        kind: Pod
        namespace: default
        label_selectors:
          - app=cloudflared
      register: cloudflared_pod
      until: 
        - cloudflared_pod.resources is defined
        - cloudflared_pod.resources | length > 0
        - cloudflared_pod.resources[0].status.phase == 'Running'
      retries: 10
      delay: 10

    - name: 13. Check Cloudflare tunnel endpoint
      uri:
        url: "https://{{ subdomains[0] }}.{{ domain }}/tst/nginx"
        return_content: yes
        validate_certs: false
      register: website_check
      failed_when: "'Hello World!' not in website_check.content"
      retries: 10
      delay: 10
      until: website_check is success
      ignore_errors: true

    - name: Debug Cloudflare endpoint check failure
      debug:
        msg: "Endpoint check response: {{ website_check }}"
      when: website_check is failed

    - name: 13.1 Ensure Cloudflare tunnel pod is running
      kubernetes.core.k8s_info:
        kubeconfig: "{{ merged_kubeconf_file }}"
        kind: Pod
        namespace: default
        label_selectors:
          - app=cloudflared
      register: cloudflared_pod_status
      retries: 10
      delay: 10
      until: 
        - cloudflared_pod_status.resources | length > 0
        - cloudflared_pod_status.resources[0].status.phase == 'Running'
      when: website_check is failed