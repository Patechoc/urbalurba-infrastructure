---
# File: playbooks/040-database-postgresql.yml
# Description: Set up PostgreSQL database using Helm
#
# This playbook performs the following tasks:
# 1. Verifies PostgreSQL secret values
# 2. Deploys PostgreSQL using Helm
# 3. Waits for PostgreSQL pod to be running
# 4. Verifies PostgreSQL service is running
#
# Prerequisites:
# - Kubernetes cluster is set up and accessible
# - Helm is installed on the provision-host
# - urbalurba-secrets contains PGPASSWORD and PGHOST
#
# Usage: ansible-playbook playbooks/040-database-postgresql.yml -e target_host="multipass-microk8s"

- name: Set up PostgreSQL Database
  hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"
    postgres_config_file: "{{ manifests_folder }}/042-database-postgresql-config.yaml"

  tasks:
    - name: 1. Check if target_host is provided
      ansible.builtin.fail:
        msg: "The variable 'target_host' is mandatory. Use -e target_host=your_host_name to specify it."
      when: target_host is not defined

    - name: 2. Print playbook description
      ansible.builtin.debug:
        msg: "Setting up PostgreSQL on MicroK8s on Ubuntu host: {{ target_host }} with manifests from: {{ manifests_folder }}. Use -e target_host=your_host_name to change settings."

    - name: 3. Verify PostgreSQL secret values
      kubernetes.core.k8s_info:
        kind: Secret
        name: urbalurba-secrets
        namespace: default
        kubeconfig: "{{ merged_kubeconf_file }}"
      register: secret_info

    - name: 4. Fail if PostgreSQL secrets are not set correctly
      ansible.builtin.fail:
        msg: "PostgreSQL secrets are not set correctly in urbalurba-secrets"
      when: >
        secret_info.resources[0].data.PGPASSWORD is not defined or
        secret_info.resources[0].data.PGHOST is not defined

    - name: 5. Set PostgreSQL password
      ansible.builtin.set_fact:
        postgres_password: "{{ secret_info.resources[0].data.PGPASSWORD | b64decode }}"

    - name: 6. Check if PostgreSQL is already installed
      ansible.builtin.command: >
        helm list -n default -f postgresql
      register: helm_list
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      changed_when: false

    - name: 7. Deploy PostgreSQL using Helm if not already installed
      ansible.builtin.command: >
        helm install postgresql bitnami/postgresql 
        --namespace default
        -f {{ postgres_config_file }}
        --set auth.postgresPassword="{{ postgres_password }}"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      when: "'postgresql' not in helm_list.stdout"

    - name: 8. Wait for PostgreSQL pod to be running
      command: kubectl get pods -n default -l app.kubernetes.io/name=postgresql -o jsonpath='{.items[0].status.phase}'
      register: pod_status
      until: pod_status.stdout == "Running"
      retries: 20
      delay: 15
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"

    - name: 9. Verify PostgreSQL service is running
      kubernetes.core.k8s_info:
        kubeconfig: "{{ merged_kubeconf_file }}"
        kind: Service
        namespace: default
        name: postgresql
      register: postgres_svc

    - name: 10. Display PostgreSQL service details
      ansible.builtin.debug:
        var: postgres_svc.resources[0].spec