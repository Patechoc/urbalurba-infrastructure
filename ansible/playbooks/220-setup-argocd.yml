---
# file: ansible/playbooks/220-setup-argocd.yml
# Description:
# Set up ArgoCD on Kubernetes
# - Installs ArgoCD using Helm chart
# - Configures ArgoCD with appropriate settings
#
# Usage:
# ansible-playbook playbooks/220-setup-argocd.yml -e kube_context="rancher-desktop"

- name: Set up ArgoCD on Kubernetes
  hosts: localhost
  gather_facts: false
  vars:
    manifests_folder: "/mnt/urbalurbadisk/manifests"
    merged_kubeconf_file: "/mnt/urbalurbadisk/kubeconfig/kubeconf-all"
    argocd_namespace: "argocd"
    installation_timeout: 600  # 10 minutes timeout for installations
    pod_readiness_timeout: 300  # 5 minutes timeout for pod readiness
    # Helm chart references
    argocd_chart: "argo/argo-cd"
    argocd_chart_version: "7.8.26"  # Specify the chart version to ensure reproducibility
    # Config files
    argocd_config_file: "{{ manifests_folder }}/220-argocd-config.yaml"

  tasks:
    - name: 1. Get current Kubernetes context if kube_context not provided
      ansible.builtin.shell: |
        kubectl config current-context
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: current_context
      changed_when: false
      when: kube_context is not defined
      
    - name: 2. Set kube_context from current context if not provided
      ansible.builtin.set_fact:
        kube_context: "{{ current_context.stdout }}"
      when: kube_context is not defined

    - name: 3. Print playbook description
      ansible.builtin.debug:
        msg: "Setting up ArgoCD on Kubernetes context: {{ kube_context }}"
    
    - name: 4. Create argocd namespace if it doesn't exist
      ansible.builtin.shell: kubectl create namespace {{ argocd_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: namespace_result
      changed_when: namespace_result.rc == 0
      failed_when: namespace_result.rc != 0

    - name: 5a. Check existing Helm repositories
      ansible.builtin.command: helm repo list
      register: helm_repo_list
      changed_when: false

    - name: 5b. Add Argo Helm repository if needed
      kubernetes.core.helm_repository:
        name: "argo"
        repo_url: "https://argoproj.github.io/argo-helm"
      when: "'argo' not in helm_repo_list.stdout"
      register: helm_repo_result

    - name: 5c. Update Helm repositories
      ansible.builtin.command: helm repo update
      changed_when: false
    
    # Install ArgoCD
    - name: 6a. Deploy ArgoCD
      ansible.builtin.command: >
        helm upgrade --install argocd {{ argocd_chart }} 
        --namespace {{ argocd_namespace }}
        --version {{ argocd_chart_version }}
        -f {{ argocd_config_file }}
        --timeout {{ installation_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: argocd_result
      changed_when: true

    - name: 6b. Display ArgoCD deployment result
      ansible.builtin.debug:
        msg: "ArgoCD deployment initiated. Waiting for readiness..."
    
    - name: 6c. Wait for ArgoCD server pod to be ready
      ansible.builtin.shell: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n {{ argocd_namespace }} --timeout={{ pod_readiness_timeout }}s
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: argocd_wait_result
      changed_when: false
      ignore_errors: true
    
    - name: 6d. Display ArgoCD server readiness status
      ansible.builtin.debug:
        msg: "ArgoCD server readiness status: {{ 'Ready' if argocd_wait_result.rc == 0 else 'Not ready yet, continuing anyway' }}"
    
    # Give the deployment a bit more time to stabilize
    - name: 6e. Give the deployment a bit more time to stabilize
      ansible.builtin.pause:
        seconds: 30
      when: argocd_wait_result.rc != 0
    
    # Verify deployments and services
    - name: 7a. Get all ArgoCD pods
      ansible.builtin.shell: |
        kubectl get pods -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: argocd_pods
      changed_when: false
    
    - name: 7b. Display ArgoCD pods
      ansible.builtin.debug:
        var: argocd_pods.stdout_lines
    
    - name: 8a. Get all ArgoCD services
      ansible.builtin.shell: |
        kubectl get svc -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: argocd_services
      changed_when: false
    
    - name: 8b. Display ArgoCD services
      ansible.builtin.debug:
        var: argocd_services.stdout_lines
    
    # Get ArgoCD Ingress information
    - name: 9a. Get ArgoCD Ingress details
      ansible.builtin.shell: |
        kubectl get ingress -n {{ argocd_namespace }} | grep argocd-server || echo "No Ingress found"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: argocd_ingress
      changed_when: false
      ignore_errors: true
    
    - name: 9b. Display ArgoCD Ingress details
      ansible.builtin.debug:
        var: argocd_ingress.stdout_lines
      when: argocd_ingress.stdout != "No Ingress found"
    
    # Check if initial admin secret exists
    - name: 10a. Check if initial admin secret exists
      ansible.builtin.shell: |
        kubectl get secret argocd-initial-admin-secret -n {{ argocd_namespace }} || echo "Secret not found"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: admin_secret_check
      changed_when: false
      ignore_errors: true
    
    - name: 10b. Display initial admin secret status
      ansible.builtin.debug:
        msg: "{{ 'Initial admin secret exists. You can retrieve the password with: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d' if 'Secret not found' not in admin_secret_check.stdout else 'Initial admin secret not found or already deleted' }}"
    
    # Determine if the installation was successful
    - name: 11a. Count running pods
      ansible.builtin.shell: |
        kubectl get pods -n {{ argocd_namespace }} | grep -v NAME | grep -c Running || echo "0"
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: running_pods_count
      changed_when: false
      ignore_errors: true
    
    - name: 11b. Determine installation success
      ansible.builtin.set_fact:
        # We should have at least 5 running pods for a successful installation
        services_setup_successful: "{{ (running_pods_count.stdout | int >= 5) }}"
    
    # Check for pods still initializing
    - name: 11c. Check for pods still initializing
      ansible.builtin.shell: |
        CREATING_PODS=$(kubectl get pods -n {{ argocd_namespace }} | grep -c "ContainerCreating" || echo "0")
        INIT_PODS=$(kubectl get pods -n {{ argocd_namespace }} | grep -c "Init:" || echo "0")
        PENDING_PODS=$(kubectl get pods -n {{ argocd_namespace }} | grep -c "Pending" || echo "0")
        TOTAL_INITIALIZING=$((${CREATING_PODS} + ${INIT_PODS} + ${PENDING_PODS}))
        echo "${TOTAL_INITIALIZING}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ merged_kubeconf_file }}"
      register: initializing_pods_count
      changed_when: false
      ignore_errors: true
    
    # Set initialization message
    - name: 11d. Set initialization message when pods are initializing
      ansible.builtin.set_fact:
        initialization_message: "Some pods are still initializing. This is normal for the first deployment."
      when: initializing_pods_count.stdout | int > 0
    
    - name: 11d-alt. Set initialization message when no pods initializing
      ansible.builtin.set_fact:
        initialization_message: "All pods have completed initialization."
      when: initializing_pods_count.stdout | int == 0
    
    - name: 12. Display final installation status
      ansible.builtin.debug:
        msg: |
          ArgoCD Installation Status:
          {{ 'SUCCESS - All key components are running' if services_setup_successful else 'PARTIAL SUCCESS - Some components may not be running yet' }}
          
          Running pods: {{ running_pods_count.stdout }} / {{ argocd_pods.stdout_lines | length - 1 }}
          {{ initialization_message }}
          
          To access ArgoCD, you can:
          
          1. Use port-forwarding:
             kubectl port-forward svc/argocd-server -n {{ argocd_namespace }} 8080:80
             Then access it at: http://localhost:8080
          
          {% if argocd_ingress.stdout != "No Ingress found" %}
          2. Access via Ingress:
             {{ argocd_ingress.stdout }}
          {% endif %}
          
          Login credentials:
          Username: admin
          Password: Retrieve with: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          
          NOTE: For security reasons, you should delete the initial admin secret after login:
          kubectl -n argocd delete secret argocd-initial-admin-secret
          
          Troubleshooting:
          - Check pod status: kubectl get pods -n {{ argocd_namespace }}
          - View logs: kubectl logs -f <pod-name> -n {{ argocd_namespace }}
          - Restart a deployment: kubectl rollout restart deployment/<deployment-name> -n {{ argocd_namespace }}
          - Check the ArgoCD ConfigMap: kubectl get cm argocd-cm -n {{ argocd_namespace }} -o yaml
          
          {{ 'INSTALLATION SUCCESSFUL' if services_setup_successful else 'INSTALLATION STATUS: Some components may still be starting' }}
