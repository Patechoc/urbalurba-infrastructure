# 320-unity-catalog-config.yaml
#
# Description:
# Helm values file for deploying Unity Catalog OSS with PostgreSQL backend for Databricks replacement.
# Provides enterprise data governance, three-level namespace, and metadata management.
#
# Part of: Databricks Replacement Project - Phase 2.5 (Data Catalog & Governance)
# Replaces: Databricks Unity Catalog and Hive Metastore functionality
#
# Usage:
#   helm upgrade --install unity-catalog unity-catalog/unity-catalog -n unity-catalog -f manifests/320-unity-catalog-config.yaml
#
# Prerequisites:
# - PostgreSQL deployed with urbalurba-postgresql container (042-database-postgresql-config.yaml)
# - unity-catalog namespace created
# - urbalurba-secrets applied to unity-catalog namespace
# - Spark Kubernetes Operator deployed (300-spark-config.yaml)
#
# Features:
# - PostgreSQL backend for metadata storage
# - REST API for catalog operations
# - Web UI for data discovery and governance
# - Integration with existing Spark cluster
# - RBAC and access control
# - Data lineage tracking
# - Schema evolution management
#
# Architecture:
# - Unity Catalog Server provides REST API and metadata management
# - PostgreSQL stores all catalog metadata (catalogs, schemas, tables, permissions)
# - Spark clients connect via Unity Catalog client library
# - Web UI provides self-service data discovery
# - Integrates with JupyterHub for notebook access

# Unity Catalog Server configuration
unityCatalog:
  # Container image
  image:
    repository: unitycatalog/unitycatalog
    tag: "0.1.0"
    pullPolicy: IfNotPresent

  # Replica configuration (single instance for development)
  replicaCount: 1

  # Resource configuration
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 1Gi
      cpu: 1000m

  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080

  # Environment variables for PostgreSQL backend
  env:
    # Database configuration from urbalurba-secrets
    - name: UC_DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: UNITY_CATALOG_DATABASE_URL
    - name: UC_DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: UNITY_CATALOG_DATABASE_USER
    - name: UC_DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: urbalurba-secrets
          key: UNITY_CATALOG_DATABASE_PASSWORD
    
    # Unity Catalog specific configuration
    - name: UC_SERVER_HOST
      value: "0.0.0.0"
    - name: UC_SERVER_PORT
      value: "8080"
    - name: UC_LOG_LEVEL
      value: "INFO"
    
    # Authentication and authorization
    - name: UC_AUTH_MODE
      value: "SIMPLE"  # Simple auth for development, upgrade to OAUTH for production
    
    # Storage configuration
    - name: UC_WAREHOUSE_DIR
      value: "/tmp/unity-catalog/warehouse"  # Use PVC in production

  # Persistent storage for warehouse data
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 10Gi
    storageClass: local-path
    mountPath: /tmp/unity-catalog/warehouse

  # Health checks
  livenessProbe:
    httpGet:
      path: /api/1.0/unity-catalog/catalogs
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /api/1.0/unity-catalog/catalogs
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Init containers for database setup
  initContainers:
    - name: wait-for-postgres
      image: postgres:16
      command:
        - sh
        - -c
        - |
          until pg_isready -h postgresql.default -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL...";
            sleep 2;
          done;
          echo "PostgreSQL is ready!"
      env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: urbalurba-secrets
              key: PGPASSWORD

# PostgreSQL database initialization
database:
  # Create dedicated Unity Catalog database
  create: true
  name: "unity_catalog"
  
  # Connection details (uses existing PostgreSQL instance)
  host: "postgresql.default"
  port: 5432
  ssl: false

# Security configuration
security:
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  # Container security context
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false  # Unity Catalog needs write access for temp files

# Service account configuration
serviceAccount:
  create: true
  name: unity-catalog
  annotations: {}

# RBAC configuration
rbac:
  create: true

# Node selection (optional)
nodeSelector: {}

# Tolerations (optional)
tolerations: []

# Affinity rules (optional)
affinity: {}

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels:
  component: unity-catalog-server
  part-of: databricks-replacement
  phase: data-catalog

# Ingress configuration (disabled - using separate ingress file)
ingress:
  enabled: false

# Web UI configuration
webui:
  enabled: true
  port: 3000
  
  # Web UI container
  image:
    repository: unitycatalog/unitycatalog-ui
    tag: "0.1.0"
    pullPolicy: IfNotPresent
  
  # Resources for Web UI
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 512Mi
      cpu: 500m
  
  # Environment variables for Web UI
  env:
    - name: UC_SERVER_URL
      value: "http://unity-catalog-server:8080"
    - name: PORT
      value: "3000"

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false  # Enable if using Prometheus operator
    namespace: unity-catalog
    interval: 30s

# Configuration for Spark integration
spark:
  # Unity Catalog Spark connector configuration
  connector:
    version: "0.1.0"
    enabled: true
  
  # Configuration that will be added to Spark
  config:
    spark.sql.catalog.unity: "io.unitycatalog.spark.UnityCatalogSparkCatalog"
    spark.sql.catalog.unity.uri: "http://unity-catalog-server.unity-catalog:8080"
    spark.sql.defaultCatalog: "unity"

# Default catalog structure to create
defaultCatalogs:
  - name: "main"
    comment: "Main catalog for production data"
    properties:
      owner: "admin"
  - name: "dev"
    comment: "Development catalog for testing"
    properties:
      owner: "admin"

defaultSchemas:
  - catalog: "main"
    name: "default"
    comment: "Default schema in main catalog"
  - catalog: "dev"  
    name: "sandbox"
    comment: "Sandbox schema for development"

# Backup configuration (optional)
backup:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "7d"