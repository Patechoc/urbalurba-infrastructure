# file: /mnt/urbalurbadisk/manifests/032-loki-config.yaml
# Minimal Loki values for resource-constrained environments with OTLP support
#
# Description:
# - Configures Loki in single-binary mode for local development
# - Disables all caches and unnecessary components for minimal resource usage
# - Enables basic OTLP endpoint support
# - Uses filesystem storage for simplicity
#
# Usage:
#   helm upgrade --install loki grafana/loki \
#     --namespace monitoring --create-namespace \
#     --values manifests/032-loki-config.yaml

# Deployment mode - explicitly set to single binary
deploymentMode: SingleBinary

# Test configuration for minimal setup
test:
  enabled: false

loki:
  auth_enabled: false
  
  # Server configuration
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095
    log_level: warn  # Reduce logging
  
  # Storage configuration - minimal
  storage:
    type: filesystem
    filesystem:
      directory: /var/loki
  
  # Schema configuration - simple v12 (more stable than v13)
  schemaConfig:
    configs:
      - from: 2024-01-01
        store: boltdb-shipper
        object_store: filesystem
        schema: v12
        index:
          prefix: loki_index_
          period: 24h
  
  # Limits configuration - very permissive for dev
  limits_config:
    # Basic limits for resource constraints
    ingestion_rate_mb: 10
    ingestion_burst_size_mb: 20
    max_global_streams_per_user: 5000
    per_stream_rate_limit: 5MB
    per_stream_rate_limit_burst: 10MB
    retention_period: 24h  # Short retention to save space
  
  # Common configuration
  common:
    replication_factor: 1
    ring:
      kvstore:
        store: inmemory

# Single binary configuration - minimal resources
singleBinary:
  replicas: 1
  
  # Very minimal resource configuration
  resources:
    requests:
      cpu: 25m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi
  
  # Persistence configuration - small
  persistence:
    enabled: true
    storageClass: ""
    size: 2Gi  # Reduced from 10Gi

# Explicitly disable ALL optional components to save resources
read:
  replicas: 0
write:
  replicas: 0
backend:
  replicas: 0

# Disable ALL caches (this is what's causing the pending pod)
chunksCache:
  enabled: false
  replicas: 0
resultsCache:
  enabled: false
  replicas: 0
indexGateway:
  enabled: false
  replicas: 0

# Minimal gateway configuration
gateway:
  enabled: true
  replicas: 1
  
  # Minimal resources for gateway
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 50m
      memory: 64Mi
  
  # Basic ingress
  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      traefik.ingress.kubernetes.io/ssl-redirect: "false"
      traefik.ingress.kubernetes.io/priority: "100"
    hosts:
      - host: loki.localhost
        paths:
          - path: /
            pathType: Prefix
    tls: []

# Disable monitoring and metrics to save resources
monitoring:
  selfMonitoring:
    enabled: false
  serviceMonitor:
    enabled: false
  prometheusRule:
    enabled: false
  grafanaAgent:
    installOperator: false

# Disable all other components
tableManager:
  enabled: false
ruler:
  enabled: false
compactor:
  enabled: false
canary:
  enabled: false  # This will disable the loki-canary pod too

# Disable memcached completely
memcached:
  enabled: false
memcachedChunks:
  enabled: false
memcachedFrontend:
  enabled: false
memcachedIndexQueries:
  enabled: false
memcachedIndexWrites:
  enabled: false

# Persistence configuration
persistence:
  enabled: true
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 2Gi